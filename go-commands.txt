When developing a project in Go, several commands and tools are available to help manage your code, 
dependencies, and build processes. Hereâ€™s a list of essential Go commands commonly used in project development:


Basic Go Commands ----


1.Create a New Module:
go mod init <module-name>

Initializes a new Go module, creating a go.mod file to manage dependencies.

2.Build the Project:
go build

Compiles the code in the current directory (or the specified package) and produces an executable binary.

3.Run the Project:
go run <file.go>

Compiles and runs the specified Go file. You can also specify multiple files.

4.Test the Project:
go test

Runs tests in the current package. You can also specify a package or file: go test <package> or go test <file_test.go>.

5.Install a Package:
go get <package>

Downloads and installs the specified package and its dependencies.
6.Install Dependencies
go mod tidy

This command does the following:

Adds any missing modules necessary to build the current module and its dependencies.
Removes any modules that are no longer necessary.
Updates the go.sum file with checksums for new dependencies.


6. Update Dependencies:
go get -u


Updates the dependencies in the module to their latest versions.

7.List Dependencies:
go list ...

Lists all the packages in the module, including dependencies.

8.Format the Code:
go fmt

Formats Go source code files in the current directory according to the Go style guidelines.

9.Generate Documentation:
go doc <package>

Displays documentation for the specified package or function.


10.Check for Errors:
go vet

Analyzes your code for potential errors and issues that are not caught by the compiler.

11.Run a Specific Test:
go test -run TestFunctionName


Runs a specific test function.

12.Benchmark Tests:
go test -bench=.

Runs all benchmark tests in the current package.

13.Clean Up Build Artifacts:
go clean

Removes object files and cached files.

